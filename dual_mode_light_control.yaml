blueprint:
  name: Dual mode motion and brightness activated light
  description: Turn on a light (or lights) if one or more sensors activate (e.g. motion detector, contact sensor etc), wait for timer to expire and turn off if motion has stopped.  Also supports different light brightnesses for day/night time.
  domain: automation
  source_url: https://github.com/longmover/ha_blueprints/blob/10b6f773ea6d1c57aa58dc462d4ce3896e18d014/dual_mode_light_control.yaml
  input:
    trigger_entities:
      name: Trigger Sensor(s)
      selector:
        entity:
          domain: 
            - binary_sensor
            - sensor
          multiple: true
    brightness_entity:
      name: Lux/Brightness Sensor
      selector:
        entity:
          device_class: illuminance
          multiple: false
    brightness_trigger:
      name: Trigger threshold
      description:
        Ambient light trigger threshold, a sensor reading higher than this will mean the light does not get switched on
      default: 20
      selector:
        number:
          min: 0.0
          max: 1000.0
          unit_of_measurement: lx
          mode: slider
          step: 1.0
    light_target:
      name: Light(s) to control
      default : []
      selector:
        entity:
          domain: light
          multiple: true
    dual_mode:
      name: Dual mode
      description: If enabled then night mode will be activated when the current time is outside the day window
      default: false
      selector:
        boolean:
    day_window_start:
      name: Day begins, switch from night to day mode
      description: Set both times to to 12:00:00 AM for constand day mode
      default: "07:00:00"
      selector:
        time:
    day_window_end:
      name: Day ends, switch from day to night mode
      default: "22:30:00"
      selector:
        time:
    brightness_level_day:
      name: Light brightness level (day)
      default: 100
      description: Daytime bulb brightness
      selector:
        number:
          min: 1.0
          max: 100.0
          unit_of_measurement: Percent
          mode: slider
          step: 1
    brightness_level_night:
      name: Light brightness level (night)
      default: 5
      description: Nighttime bulb brightness
      selector:
        number:
          min: 1.0
          max: 100.0
          unit_of_measurement: Percent
          mode: slider
          step: 1
    wait_time:
      name: Wait time
      description: Time to leave the light on after last activity finishes
      default: 120
      selector:
        number:
          min: 0.0
          max: 3600.0
          unit_of_measurement: seconds
          mode: slider
          step: 1.0
    transition:
      name: Light transition time
      description: Time taken to transition from one state to another
      default: 1
      selector:
        number:
          min: 0.0
          max: 10.0
          unit_of_measurement: seconds
          mode: slider
          step: 1.0

mode: restart
max_exceeded: silent

variables:
  target_lights: !input light_target
  dual_mode: !input dual_mode
  lights_on: "{{ expand(target_lights) | selectattr('state', 'eq', 'on') | list | count > 0 }}"

trigger:
  platform: state
  entity_id: !input trigger_entities
  from: "off"
  to: "on"

action:
  - if:
      # check if light level is below threshold
    - condition: numeric_state
      entity_id: !input brightness_entity
      below: !input brightness_trigger
    then:
      # light level is below threshold, trigger lights
      if:
        # check if current time is within day window
        - condition: time
          after: !input day_window_start
          before: !input day_window_end
      then:
        # is daytime
        - service: light.turn_on
          target: 
            entity_id: !input light_target
          data:
            brightness_pct: !input brightness_level_day
            transition: !input transition
        - wait_for_trigger:
            platform: state
            entity_id: !input trigger_entities
            from: "on"
            to: "off"
          # turn light(s) off after timer expires
        - delay: !input wait_time
        - service: light.turn_off
          target: 
            entity_id: !input light_target
      else:
        # is night time
        if:
          # check if dual mode is enabled
          - "{{ dual_mode }}"
        then:    
          - service: light.turn_on
            target: 
              entity_id: !input light_target
            data:
              brightness_pct: !input brightness_level_night
              transition: !input transition
          - wait_for_trigger:
              platform: state
              entity_id: !input trigger_entities
              from: "on"
              to: "off"
          # turn light(s) off after timer expires
          - delay: !input wait_time
          - service: light.turn_off
            target: 
              entity_id: !input light_target
        else:
          # dual mode is disabled, do not trigger lights, if any lights are on then turn off after activity finishes and after wait time
          if:
            - "{{ lights_on }}"
          then:
            - wait_for_trigger:
                platform: state
                entity_id: !input trigger_entities
                from: "on"
                to: "off"
            # turn light(s) off after timer expires
            - delay: !input wait_time
            - service: light.turn_off
              target: 
                entity_id: !input light_target
    else:
      # light level is above threshold
      if:
        # check for any lights already on
        - "{{ lights_on }}"
      then:
        # one or more lights on, assume ambient light is below threshold
        if:
          # check if current time is within day window
          - condition: time
            after: !input day_window_start
            before: !input day_window_end
        then:
          # is daytime
          - service: light.turn_on
            target: 
              entity_id: !input light_target
            data:
              brightness_pct: !input brightness_level_day
              transition: !input transition
          - wait_for_trigger:
              platform: state
              entity_id: !input trigger_entities
              from: "on"
              to: "off"
          # turn light(s) off after timer expires
          - delay: !input wait_time
          - service: light.turn_off
            target: 
              entity_id: !input light_target
        else:
          # is night time
          if:
            # check if dual mode is enabled
            - "{{ lights_on }}"
          then:    
            - service: light.turn_on
              target: 
                entity_id: !input light_target
              data:
                brightness_pct: !input brightness_level_night
                transition: !input transition
            - wait_for_trigger:
                platform: state
                entity_id: !input trigger_entities
                from: "on"
                to: "off"
            # turn light(s) off after timer expires
            - delay: !input wait_time
            - service: light.turn_off
              target: 
                entity_id: !input light_target
          else:
            # dual mode is disabled, do not trigger lights, if any lights are on then turn off after activity finishes and after wait time
            if:
              - "{{ lights_on }}"
            then:
              - wait_for_trigger:
                  platform: state
                  entity_id: !input trigger_entities
                  from: "on"
                  to: "off"
              # turn light(s) off after timer expires
              - delay: !input wait_time
              - service: light.turn_off
                target: 
                  entity_id: !input light_target
